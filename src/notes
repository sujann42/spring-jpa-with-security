+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#Restful Web Services [Updated]
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
For Other features check on: restful-web-services-with-springboot. [Github]

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
BASIC AUTHENTICATION WITH SPRING SECURITY:
--------------------------------------------
1) Add Maven Dependency
- Springboot auto configuration kicks off. Automatically configure basic security.
- Build and run the app.
- You will be provided with a security password, use that in postman while sending a
    post-request.
- Go to Authentication on Postman -> Set username: user and Password: you get from IntelliJ
- If you don't like the password changing every time: you can set it on application.properties.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
JPA Repository:
--------------------------------------------
Create a repository interface and make it extend JPARepository<User, Integer>
Create UserJPAResourceController as a controller
Create a private instance of UserRepository and Autowire it.
    @Autowired
    private UserRepository userRepository;
1) Get all => userRepository.findAll();
2) Find one => userRepository.findById(id);
3) Update =>
4) Delete => userRepository.deleteById(id);

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
POST ENTITY:
+++++++++++++++++++++++++++++++++++++++++++++++++++
Post.java:
------------
 @ManyToOne(fetch = FetchType.LAZY)
    private User user;

    ----------
 User.java
 ---------------
//One User can have many posts
    @OneToMany(mappedBy = "user")
    private List<Post> posts;

http://localhost:8089/jpa/users/10012/posts

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
RICHARDSON MATURITY MODEL:
--------------------------------------------
1) LEVEL 0: EXPOSE SOAP WEB SERVICES
2) LEVEL 1: EXPOSE RESOURCES WITH PROPER URI
3) LEVEL 2: EXPOSE RESOURCES WITH PROPER URI + PROPER USE OF HTTP METHODS.
4) LEVEL 3: LEVEL 2 + HATEOAS DATA + NEXT POSSIBLE ACTIONS
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
RESTFUL WEB SERVICES: BEST PRACTICES:
---------------------------------------------------------------------------
1) CONSUMER FIRST: ALways think about the consumer. Will they understand it?
2) Have great documentation.
3) Make sure consumer understand.
4) Make best use of HTTP methods
5) Make sure you send proper response [created is not enough only with success, use Created, 201]
6) No Secure Info in URI.
7) User plurals
8) Use nouns for resources: For exceptions: Define a consistent approach.
--------------------------------------------
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++